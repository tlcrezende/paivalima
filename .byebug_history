c
@contrato.arquivos.blobs
@contrato.arquivos.blobs.map {|el| el.url}
@contrato.arquivos.blobs.url
@contrato.arquivos.attach(params[:file])
@contrato.arquivos.blobs.url
@contrato.arquivos.blob.url
@contrato.arquivos.attach(params[:file])
c
@contrato.arquivo.attach(params[:file])
q
@contrato.arquivo.attach(params[:file])
q
params['file']
@contrato.arquivos.attach(params['file'])
c
@contrato.arquivos.attach(params[:data])
@contrato = Contrato.find(params[:id])
params
c
q
@contrato = Contrato.find(params[:id])
puts params[:data]
params[:data].methods
params[:data].name
params[:data]
params
c
params
c
params
c
q
blobs
q
blob
@contrato.arquivos.attach(blob)
@contrato.arquivos.attach(blob.signed_id)
blob.signed_id
blob
@contrato.arquivos.attach
@contrato.arquivos.attached?
@contrato.arquivos
@contrato
blob
q
arquivo[:awsKey]
arquivo
obj
c
q
@contrato = Contrato.create!(contrato_params)
q
@contrato = Contrato.create!(contrato_params)
Contrato.new(contrato_params)
contrato_params
params
q
params
q
pagamento
c
continue
d[:data_vencimento]
c
data[1][:nome]
data[1]
data
c
d['nome']
d[:nome]
cliente = Cliente.create(
          nome: d[:nome], 
          cpf_cnpj: d[:cpf], 
          rg: d[:rg], 
          cep: d[:cep], 
          logradouro: d[:logradouro], 
          cidade: d[:cidade], 
          uf: d[:UF], 
          celular: d[:telefone],
          apelido: d[:apelido]
        )
cliente
d
c
data[0]
data
n
data_json[0]
data_json
c
n
JSON.parse(data_json).class
data_json.class
JSON.parse(data_json).class
JSON.parse(data_json)[0]
data_json.to_sym[0]
data_json.to_sym
data_json.to_json[0]
data_json.to_json
data_json[0]
data_json
c
pagamento.save
n
pagamento.save
c
cx
d[:valor_a_receber]
pagamento.valor
pagamento.data_vencimento
pagamento.data_pagamento
pagamento
pagamento.save
pagamento
pagamenot
n
pagamento.save
pagamento
c
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento).sum(&:valor_pago) }
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento) }
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento) }.pluck(:valor)
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento) }
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento).sum(&:valor) }
object.lotes.includes(:pagamentos).map(&:pagamentos)
c
contratos_nao_encontrados
c
Pagamento.all.each do |p|
Pagamento.all.pluck(:identificador).uniq.count
Pagamento.all.pluck(:identificador).uniq
Pagamento.all.pluck(:identificador)
contratos_nao_encontrados.count
contratos_nao_encontrados
c
contratos_nao_encontrados
c
Pagamento.last
contratos_nao_encontrados
c
dados.last
dados.count
dados
nomes
c
cliente.save
cliente = Cliente.create(nome: d[:nome], cpf_cnpj: d[:cpf], rg: d[:rg], cep: d[:cep], logradouro: d[:logradouro], cidade: d[:cidade], uf: d[:UF])
c
cliente = Cliente.create!(nome: d[:nome])
cliente.save
cliente
cliente = Cliente.create(nome: d[:nome])
Cliente.last
Cliente.create(nome: d[:nome])
d[:nome]
d
c
d[:nome]
d
d['nome']
c
nomes.uniq.count
nomes.uniq
nomes
nomes.count
c
row[1]
row[0]
row
c
sheet_name
c
n
@pagamentos
n
@pagamentos
n
pagamento
n
pagamento
n
pagamento
c
Pagamento.where(identificador: pagamento['seu_número'])
c
Pagamento.where(identificador: pagamento['seu_número'])
c
Pagamento.where(identificador: pagamento['seu_número'])
pagamento
c
Pagamento.last
@pagamentos
c
Pagamento.where(identificador: pagamento['seu_número']).empty?
Pagamento.where(identificador: pagamento['seu_número']).nil?
Pagamento.where(identificador: pagamento['seu_número'])
Pagamento.find_by_identificador(pagamento['seu_número'])
Pagamento.where(identificador: pagamento['seu_número']).nil?
pagamento
c
@pagamentos
c
@pagamentos
n
@pagamentos
c
@pagamentos
c
a
c
pagamento
n
c
n
pagamento
n
c
pagamento
n
c
pagamento
n
c
pagamento
n
c
n
pagamento
n
pagamento
row
c
object.user
object
c
Pagamento.find_by_identificador(pagamento['seu_número']).update(status: 'pago')
Pagamento.find_by_identificador(pagamento['seu_número'])
Pagamento.find_by_identificador(pagamento['seu_número']).update(status: 'pago')
Pagamento.find_by_identificador(pagamento['seu_número'])
Pagamento.find_by_identificador(pagamento['seu_número']
pagamento['seu_número']
pagamento
c
Pagamento.find_by_identificador('0017A/011')
@pagamentos[1]
Pagamento.last
Pagamento.find_by_identificador(@pagamentos[0]['seu_número])
c
n
@pagamentos.count
c
pagamentos_nao_existentes.empty?
pagamentos_nao_existentes.empry?
pagamentos_nao_existentes
c
