c
a
c
pagamento
n
c
n
pagamento
n
c
pagamento
n
c
pagamento
n
c
pagamento
n
c
n
pagamento
n
pagamento
row
c
object.user
object
c
Pagamento.find_by_identificador(pagamento['seu_número']).update(status: 'pago')
Pagamento.find_by_identificador(pagamento['seu_número'])
Pagamento.find_by_identificador(pagamento['seu_número']).update(status: 'pago')
Pagamento.find_by_identificador(pagamento['seu_número'])
Pagamento.find_by_identificador(pagamento['seu_número']
pagamento['seu_número']
pagamento
c
Pagamento.find_by_identificador('0017A/011')
@pagamentos[1]
Pagamento.last
Pagamento.find_by_identificador(@pagamentos[0]['seu_número])
c
n
@pagamentos.count
c
pagamentos_nao_existentes.empty?
pagamentos_nao_existentes.empry?
pagamentos_nao_existentes
c
pagamentos_nao_existentes
c
@pagamentos
c
[1, 2, 3].to_s
pagamentos_nao_existentes.any?
pagamentos_nao_existentes
c
a - Pagamento.pluck(:identificador)
Pagamento.pluck(:identificador).distinct(a)
Pagamento.pluck(:identificador).include?(a)
Pagamento.pluck(:identificador).include(a)
Pagamento.pluck(:identificador).last
a = @pagamentos.pluck('seu_número')
@pagamentos.pluck('seu_número')
@pagamentos[0]
@pagamentos.pluck(:nosso_numero)
q
@contratos.page(current_page).per(per_page)
q
p params
Contrato.order(:data_inicio, 'asc')
c
pagamentos.last
c
pagamentos.count
pagamentos
c
carne_codigo
c
carne_codigo
c
carne_codigo
c
ordem_carne
n
carne_codigo_antigo
c
carne_codigo_antigo
letra_carne_codigo_antigo
c
@pagamentos.last
c
params
q
sheet.each_row_streaming(offset: 2).with_index
row.map.with_index
row.map_with_index
 headers = ['Nome', 'Seu Número', 'Nosso Numero', 'Valor',  'Valor Pago', 'Vencimento', 'Situação']
sheet.row(2)
sheet.row(1)
sheet.headers
sheet.header
sheet
row[0]
row.to_object
row
q
xlsx.sheet(xlsx.sheets[0]).methods
xlsx.sheet(xlsx.sheets[0])
xlsx.methods
q
pags[0].map {|el| el.value}
pags[0][0].value
pags[0].to_a
pags[0][0]
pags[0]
pags
xlsx.each_row_streaming(offset: 2) do |row| pags << row end
pags
pags = []
pags
xlsx.each_row_streaming(offset: 2) do |row| pags << row end
pags = []
pags
q
sheet.cell(1,1)
sheet
sheet = book.sheet(book.sheets[0])
book.each_with_pagename do |name, sheet| p sheet.row(1) end
 xlsx.each_with_pagename do |name, sheet| p sheet.row(1) end
tmpfile.path
book.sheets
book = Roo::Spreadsheet.open('/tmp/20230822-89-2a3glt', extension: :xlsx)
Roo::Spreadsheet.open('/tmp/20230822-89-2a3glt', extension: :xlsx)
Roo::Spreadsheet.open('20230822-89-2a3glt', extension: :xlsx)
Roo::Spreadsheet.open('/tmp/20230822-133-vb202', extension: :xlsx)
tmpfile
xlsx.each_row_streaming(offset: 2) do |row| pags << row end
pags[0][0]
pags[0]
pags
xlsx.each_row_streaming(offset: 2) do |row| pags << row.inspect end
pags = []
q
sheet.cell(1,1)
sheet
sheet = book.sheet(book.sheets[0])
book.each_with_pagename do |name, sheet| p sheet.row(1) end
 xlsx.each_with_pagename do |name, sheet| p sheet.row(1) end
tmpfile.path
book.sheets
book = Roo::Spreadsheet.open('/tmp/20230822-89-2a3glt', extension: :xlsx)
Roo::Spreadsheet.open('/tmp/20230822-89-2a3glt', extension: :xlsx)
Roo::Spreadsheet.open('20230822-89-2a3glt', extension: :xlsx)
Roo::Spreadsheet.open('/tmp/20230822-133-vb202', extension: :xlsx)
tmpfile
