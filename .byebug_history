continue
Contrato.first.contrato_files.attached?
Contrato.first.attached?
q
Contrato.first
@contrato
Contrato
continue
params[:file]
q
params[:filters]&.values
params['filters']
params
c
params
q
c
q
c
q
qy
c
p 'a' unless instance_options[:show_contratos].present?
instance_options[:show_contratos].present?
q
instance_options[:show_contratos]
q
instance_options[:show_contratos]
continue
object.lotes.includes(:pagamentos).map(&:pagamentos).map(&:count)
object.lotes.includes(:pagamentos).map(&:pagamentos).map(&:size)
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.size }
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.count }
object.lotes.includes(:pagamentos).map(&:pagamentos).map(&:count)
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento).count }
q
 object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento).count }
 object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento).sum(&:valor) }
object.lotes.includes(:pagamentos).map(&:pagamentos :data_pagamento)
object.lotes.includes(:pagamentos).map(&:pagamentos:count)
q
arr[1]
arr[0]
arr
object.lotes.each_with_index do |lote, index|
        arr << {
          **lote.attributes.symbolize_keys,
          valor_arrecadado: pag_recebidos[index]
        }
      end
arr = []
object.lotes.map do |lote, index|
        {
          **lote.attributes.symbolize_keys,
          valor_arrecadado: pag_recebidos[index]
        }
      end
object.lotes.map_with_index do |lote, index|
        {
          **lote.attributes.symbolize_keys,
          valor_arrecadado: pag_recebidos[index]
        }
      end
objet.lotes.map_with_index do |lote, index|
        {
          **lote.attributes.symbolize_keys,
          valor_arrecadado: pag_recebidos[index]
        }
      end
pag_recebidos = object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento).sum(&:valor) }
object.lotes.includes(:pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento).sum(&:valor) }
 object.lotes.includes(contratos: :pagamentos).map(&:pagamentos).map { |p| p.filter(&:data_pagamento).sum(&:valor) }
object.lotes.includes(contratos: :pagamentos).map { |p| p.filter(&:data_pagamento).sum(&:valor) }
qtde_pagamentos
qtde_pagamentos_recebidos
 object.lotes.to_a[0].pagamentos
 object.lotes.to_a
 object.lotes.to_array
 object.lotes.to_h
 object.lotes
q
c
Contrato.includes(:lote, :pagamentos)
q
c
object.lotes.map(&:contratos).flatten.map(&:pagamentos).flatten.sum(&:valor)
q
c1.pagamentos
c.pagamentos
c1 = object.lotes.map(&:contratos).flatten[0]
object.lotes.map(&:contratos).flatten.map(&:pagamentos).flatten.sum(&:valor)
object.lotes.map(&:contratos).flatten.sum(&:valor)
object.lotes.pagamentos
object.lotes
c
pagamentos
c
super
super.delete(:lotes)
super
super.delete('lotes')
super['lotes']
super
c
instance_options
c
instance_options
c
instance_options
c
n
authenticate_user!
c
current_api_user
current_user
